version: '3.8'

services:
  exporter:
    build: .
    container_name: meraki-dashboard-exporter
    restart: unless-stopped
    ports:
      - "9090:9090"
    environment:
      # Required: Meraki API key
      - MERAKI_API_KEY=${MERAKI_API_KEY}
      
      # Optional: Specific organization ID
      - MERAKI_EXPORTER_ORG_ID=${MERAKI_EXPORTER_ORG_ID:-}
      
      # Optional: Scrape interval (default 300s)
      - MERAKI_EXPORTER_SCRAPE_INTERVAL=${MERAKI_EXPORTER_SCRAPE_INTERVAL:-300}
      
      # Optional: Log level (default INFO)
      - MERAKI_EXPORTER_LOG_LEVEL=${MERAKI_EXPORTER_LOG_LEVEL:-INFO}
      
      # Optional: Device types to collect (comma-separated)
      # - MERAKI_EXPORTER_DEVICE_TYPES=${MERAKI_EXPORTER_DEVICE_TYPES:-MS,MR,MV,MT}
      
      # Optional: OpenTelemetry settings
      - MERAKI_EXPORTER_OTEL_ENABLED=${MERAKI_EXPORTER_OTEL_ENABLED:-false}
      - MERAKI_EXPORTER_OTEL_ENDPOINT=${MERAKI_EXPORTER_OTEL_ENDPOINT:-}
      - MERAKI_EXPORTER_OTEL_SERVICE_NAME=${MERAKI_EXPORTER_OTEL_SERVICE_NAME:-meraki-dashboard-exporter}
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # Optional: Prometheus for testing
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    depends_on:
      - exporter

volumes:
  prometheus_data: